package com.cinehub.promotion.service;

import com.cinehub.promotion.dto.request.PromotionRequest;
import com.cinehub.promotion.dto.response.PromotionResponse;
import com.cinehub.promotion.dto.response.PromotionValidationResponse;
import com.cinehub.promotion.entity.Promotion;
import com.cinehub.promotion.repository.PromotionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class PromotionService {

    private final PromotionRepository promotionRepository;

    // ---------------------------------------------------------------------
    // 1. LOGIC KI·ªÇM TRA M√É KHUY·∫æN M√ÉI (CHO BOOKING SERVICE)
    // ---------------------------------------------------------------------

    /**
     * Ki·ªÉm tra m√£ khuy·∫øn m√£i v√† tr·∫£ v·ªÅ chi ti·∫øt n·∫øu h·ª£p l·ªá.
     * 
     * @param code M√£ khuy·∫øn m√£i.
     * @return PromotionValidationResponse n·∫øu h·ª£p l·ªá.
     * @throws IllegalArgumentException n·∫øu m√£ kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.
     */
    public PromotionValidationResponse validatePromotionCode(String code) {
        LocalDateTime now = LocalDateTime.now();

        // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c Query t√πy ch·ªânh ƒë·ªÉ ki·ªÉm tra hi·ªáu l·ª±c
        Promotion promotion = promotionRepository.findValidPromotionByCode(code, now)
                .orElseThrow(() -> new IllegalArgumentException(
                        "M√£ khuy·∫øn m√£i kh√¥ng h·ª£p l·ªá, kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n."));

        return PromotionValidationResponse.builder()
                .code(promotion.getCode())
                .discountType(promotion.getDiscountType())
                .discountValue(promotion.getDiscountValue())
                .isOneTimeUse(promotion.getIsOneTimeUse())
                .build();
    }

    // ---------------------------------------------------------------------
    // 2. CRUD CHO ADMIN/STAFF
    // ---------------------------------------------------------------------

    /**
     * L·∫•y t·∫•t c·∫£ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i.
     */
    public List<PromotionResponse> getAllPromotions() {
        return promotionRepository.findAll().stream()
                .map(this::mapToResponse)
                .toList();
    }

    /**
     * T·∫°o m·ªõi m·ªôt ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i.
     */
    @Transactional
    public PromotionResponse createPromotion(PromotionRequest request) {
        if (promotionRepository.findByCode(request.getCode()).isPresent()) {
            throw new IllegalArgumentException("M√£ khuy·∫øn m√£i ƒë√£ t·ªìn t·∫°i.");
        }

        Promotion newPromo = mapToEntity(request);
        Promotion savedPromo = promotionRepository.save(newPromo);
        log.info("‚≠ê Created new promotion: {}", savedPromo.getCode());
        return mapToResponse(savedPromo);
    }

    /**
     * C·∫≠p nh·∫≠t ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i.
     */
    @Transactional
    public PromotionResponse updatePromotion(UUID id, PromotionRequest request) {
        Promotion existingPromo = promotionRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("Promotion not found with ID: " + id));

        // Ki·ªÉm tra xem m√£ code m·ªõi c√≥ tr√πng v·ªõi m√£ kh√°c kh√¥ng (n·∫øu m√£ code b·ªã thay ƒë·ªïi)
        if (!existingPromo.getCode().equals(request.getCode()) &&
                promotionRepository.findByCode(request.getCode()).isPresent()) {
            throw new IllegalArgumentException("M√£ khuy·∫øn m√£i m·ªõi ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi ch∆∞∆°ng tr√¨nh kh√°c.");
        }

        existingPromo.setCode(request.getCode());
        existingPromo.setDiscountType(request.getDiscountType());
        existingPromo.setDiscountValue(request.getDiscountValue());
        existingPromo.setStartDate(request.getStartDate());
        existingPromo.setEndDate(request.getEndDate());
        existingPromo.setIsActive(request.getIsActive());
        existingPromo.setDescription(request.getDescription());

        Promotion updatedPromo = promotionRepository.save(existingPromo);
        log.info("üîÑ Updated promotion: {}", updatedPromo.getCode());
        return mapToResponse(updatedPromo);
    }

    /**
     * X√≥a ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i.
     */
    @Transactional
    public void deletePromotion(UUID id) {
        if (!promotionRepository.existsById(id)) {
            throw new IllegalArgumentException("Promotion not found with ID: " + id);
        }
        promotionRepository.deleteById(id);
        log.warn("üóëÔ∏è Deleted promotion with ID: {}", id);
    }

    // --- Helper Mappers ---

    private Promotion mapToEntity(PromotionRequest request) {
        return Promotion.builder()
                .code(request.getCode())
                .discountType(request.getDiscountType())
                .discountValue(request.getDiscountValue())
                .startDate(request.getStartDate())
                .endDate(request.getEndDate())
                .isActive(request.getIsActive())
                .isOneTimeUse(request.getIsOneTimeUse())
                .description(request.getDescription())
                .build();
    }

    private PromotionResponse mapToResponse(Promotion promotion) {
        return PromotionResponse.builder()
                .id(promotion.getId())
                .code(promotion.getCode())
                .discountType(promotion.getDiscountType())
                .discountValue(promotion.getDiscountValue())
                .startDate(promotion.getStartDate())
                .endDate(promotion.getEndDate())
                .isActive(promotion.getIsActive())
                .isOneTimeUse(promotion.getIsOneTimeUse())
                .description(promotion.getDescription())
                .build();
    }
}