package com.cinehub.fnb.service;

import com.cinehub.fnb.dto.request.FnbItemDto;
import com.cinehub.fnb.dto.request.FnbItemRequest;
import com.cinehub.fnb.dto.response.FnbCalculationResponse;
import com.cinehub.fnb.dto.response.FnbItemResponse;
import com.cinehub.fnb.entity.FnbItem;
import com.cinehub.fnb.repository.FnbItemRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class FnbService {

    private final FnbItemRepository fnbItemRepository;

    // ---------------------------------------------------------------------
    // 1. LOGIC T√çNH TO√ÅN (CHO BOOKING SERVICE)
    // ---------------------------------------------------------------------

    /**
     * T√≠nh t·ªïng gi√° F&B d·ª±a tr√™n danh s√°ch c√°c m·ª•c v√† s·ªë l∆∞·ª£ng ƒë∆∞·ª£c ch·ªçn.
     * API n√†y ƒë∆∞·ª£c Booking Service g·ªçi ƒë·ªìng b·ªô.
     */
    public FnbCalculationResponse calculateTotalPrice(List<FnbItemDto> selectedFnbItems) {

        // L·∫•y t·∫•t c·∫£ c√°c FnbItemId duy nh·∫•t
        Set<UUID> fnbIds = selectedFnbItems.stream()
                .map(FnbItemDto::getFnbItemId)
                .collect(Collectors.toSet());

        // Tra c·ª©u t·∫•t c·∫£ c√°c m·ª•c F&B trong m·ªôt l·∫ßn g·ªçi DB
        List<FnbItem> fnbEntities = fnbItemRepository.findAllByIdIn(fnbIds.stream().toList());

        // Map ID sang Entity ƒë·ªÉ d·ªÖ d√†ng tra c·ª©u gi√°
        Map<UUID, FnbItem> fnbMap = fnbEntities.stream()
                .collect(Collectors.toMap(FnbItem::getId, item -> item));

        BigDecimal total = BigDecimal.ZERO;

        for (FnbItemDto itemDto : selectedFnbItems) {
            FnbItem fnbItem = fnbMap.get(itemDto.getFnbItemId());

            if (fnbItem == null) {
                log.warn("‚ùå F&B Item ID {} not found. Skipping calculation for this item.", itemDto.getFnbItemId());
                // T√πy ch·ªçn: N√©m ngo·∫°i l·ªá thay v√¨ b·ªè qua
                continue;
            }

            // T√≠nh t·ªïng: ƒë∆°n gi√° * s·ªë l∆∞·ª£ng
            BigDecimal itemTotal = fnbItem.getUnitPrice()
                    .multiply(new BigDecimal(itemDto.getQuantity()));
            total = total.add(itemTotal);
        }

        log.info("üçî Total F&B price calculated: {}", total);
        return FnbCalculationResponse.builder()
                .totalFnbPrice(total)
                .build();
    }

    // ---------------------------------------------------------------------
    // 2. CRUD CHO ADMIN/STAFF
    // ---------------------------------------------------------------------

    /**
     * L·∫•y t·∫•t c·∫£ c√°c m·ª•c F&B ƒëang ho·∫°t ƒë·ªông.
     */
    public List<FnbItemResponse> getAllFnbItems() {
        return fnbItemRepository.findAll().stream()
                .map(this::mapToResponse)
                .toList();
    }

    /**
     * T·∫°o m·ªõi m·ªôt m·ª•c F&B.
     */
    @Transactional
    public FnbItemResponse createFnbItem(FnbItemRequest request) {
        // T√πy ch·ªçn: Ki·ªÉm tra tr√πng t√™n (n·∫øu c·∫ßn x·ª≠ l√Ω l·ªói th√¢n thi·ªán h∆°n)

        FnbItem newItem = FnbItem.builder()
                .name(request.getName())
                .description(request.getDescription())
                .unitPrice(request.getUnitPrice())
                .build();

        FnbItem savedItem = fnbItemRepository.save(newItem);
        log.info("‚ûï Created F&B item: {}", savedItem.getName());
        return mapToResponse(savedItem);
    }

    /**
     * C·∫≠p nh·∫≠t m·ªôt m·ª•c F&B hi·ªán c√≥.
     */
    @Transactional
    public FnbItemResponse updateFnbItem(UUID id, FnbItemRequest request) {
        FnbItem existingItem = fnbItemRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("F&B Item not found with ID: " + id));

        existingItem.setName(request.getName());
        existingItem.setDescription(request.getDescription());
        existingItem.setUnitPrice(request.getUnitPrice());

        FnbItem updatedItem = fnbItemRepository.save(existingItem);
        log.info("üîÑ Updated F&B item: {}", updatedItem.getName());
        return mapToResponse(updatedItem);
    }

    /**
     * X√≥a m·ªôt m·ª•c F&B.
     */
    @Transactional
    public void deleteFnbItem(UUID id) {
        if (!fnbItemRepository.existsById(id)) {
            throw new IllegalArgumentException("F&B Item not found with ID: " + id);
        }
        fnbItemRepository.deleteById(id);
        log.warn("üóëÔ∏è Deleted F&B item with ID: {}", id);
    }

    // --- Mapper Helpers ---

    private FnbItemResponse mapToResponse(FnbItem item) {
        return FnbItemResponse.builder()
                .id(item.getId())
                .name(item.getName())
                .description(item.getDescription())
                .unitPrice(item.getUnitPrice())
                .build();
    }
}