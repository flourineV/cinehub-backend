package com.cinehub.showtime.controller;

import com.cinehub.showtime.service.SeatLockService;
import com.cinehub.showtime.dto.request.SeatLockRequest;
import com.cinehub.showtime.dto.response.SeatLockResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.util.List; // üëà C·∫ßn import List
import java.util.UUID;

@RestController
@RequestMapping("/api/showtimes/seat-lock")
@RequiredArgsConstructor
public class SeatLockController {

    private final SeatLockService seatLockService;

    /**
     * Kh√≥a nhi·ªÅu gh·∫ø c√πng l√∫c. Tr·∫£ v·ªÅ List<SeatLockResponse>.
     * N·∫øu x·∫£y ra l·ªói xung ƒë·ªôt (CONFLICT), tr·∫£ v·ªÅ HTTP 409.
     */
    @PostMapping("/lock")
    // S·ª≠a ki·ªÉu tr·∫£ v·ªÅ th√†nh List<SeatLockResponse>
    public ResponseEntity<List<SeatLockResponse>> lockSeats(@RequestBody SeatLockRequest req) {
        // Gi·∫£ s·ª≠ service tr·∫£ v·ªÅ List c√°c ph·∫£n h·ªìi th√†nh c√¥ng ho·∫∑c List c√°c ph·∫£n h·ªìi l·ªói
        List<SeatLockResponse> responses = seatLockService.lockSeats(req.getShowtimeId(), req.getSeatIds(),
                req.getUserId());

        // Logic ki·ªÉm tra l·ªói ƒë∆°n gi·∫£n: N·∫øu ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† CONFLICT, tr·∫£ v·ªÅ 409
        if (!responses.isEmpty() && responses.get(0).getStatus().equals("CONFLICT")) {
            // Tr·∫£ v·ªÅ HTTP 409 Conflict n·∫øu c√≥ l·ªói x·∫£y ra
            return new ResponseEntity<>(responses, HttpStatus.CONFLICT);
        }

        // Tr·∫£ v·ªÅ HTTP 200 OK n·∫øu t·∫•t c·∫£ c√°c gh·∫ø ƒë∆∞·ª£c kh√≥a th√†nh c√¥ng
        return ResponseEntity.ok(responses);
    }

    /**
     * Gi·∫£i ph√≥ng nhi·ªÅu gh·∫ø c√πng l√∫c. Tr·∫£ v·ªÅ List<SeatLockResponse>.
     */
    @PostMapping("/release")
    // S·ª≠a ki·ªÉu tr·∫£ v·ªÅ th√†nh List<SeatLockResponse>
    public ResponseEntity<List<SeatLockResponse>> releaseSeats(@RequestBody SeatLockRequest req) {
        // H√†m releaseSeats c·∫ßn ƒë∆∞·ª£c ch·ªânh s·ª≠a trong service ƒë·ªÉ tr·∫£ v·ªÅ
        // List<SeatLockResponse>
        return ResponseEntity.ok(
                seatLockService.releaseSeats(req.getShowtimeId(), req.getSeatIds()));
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i gh·∫ø ƒë∆°n l·∫ª (kh√¥ng c·∫ßn thay ƒë·ªïi).
     */
    @GetMapping("/status")
    public ResponseEntity<SeatLockResponse> seatStatus(
            @RequestParam UUID showtimeId,
            @RequestParam UUID seatId) {
        return ResponseEntity.ok(seatLockService.seatStatus(showtimeId, seatId));
    }
}