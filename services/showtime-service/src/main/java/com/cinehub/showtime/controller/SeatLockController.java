package com.cinehub.showtime.controller;

import com.cinehub.showtime.service.SeatLockService;
import com.cinehub.showtime.dto.request.SeatLockRequest;
import com.cinehub.showtime.dto.response.SeatLockResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/showtimes/seat-lock")
@RequiredArgsConstructor
public class SeatLockController {

    private final SeatLockService seatLockService;

    /**
     * Kh√≥a nhi·ªÅu gh·∫ø c√πng l√∫c. S·ª¨A ƒê·ªîI ƒë·ªÉ truy·ªÅn List<SeatSelectionDetail>.
     */
    @PostMapping("/lock")
    public ResponseEntity<List<SeatLockResponse>> lockSeats(@RequestBody SeatLockRequest req) {

        // ‚ùå C√ÅCH G·ªåI C≈®: req.getSeatIds() kh√¥ng c√≤n ƒë·ªß th√¥ng tin
        /*
         * List<SeatLockResponse> responses =
         * seatLockService.lockSeats(req.getShowtimeId(), req.getSeatIds(),
         * req.getUserId());
         */

        // ‚úÖ C√ÅCH G·ªåI M·ªöI: Truy·ªÅn to√†n b·ªô List<SeatSelectionDetail>
        List<SeatLockResponse> responses = seatLockService.lockSeats(
                req.getShowtimeId(),
                req.getSelectedSeats(), // L·∫•y List<SeatSelectionDetail>
                req.getUserId());

        // Logic ki·ªÉm tra l·ªói ƒë∆°n gi·∫£n:
        if (!responses.isEmpty() && responses.get(0).getStatus().equals("CONFLICT")) {
            return new ResponseEntity<>(responses, HttpStatus.CONFLICT);
        }

        return ResponseEntity.ok(responses);
    }

    /**
     * Gi·∫£i ph√≥ng nhi·ªÅu gh·∫ø c√πng l√∫c. (C√≥ th·ªÉ gi·ªØ l·∫°i c√°ch g·ªçi c≈© n·∫øu service kh√¥ng
     * c·∫ßn ticketType)
     */
    @PostMapping("/release")
    public ResponseEntity<List<SeatLockResponse>> releaseSeats(@RequestBody SeatLockRequest req) {

        // üí° L∆ØU √ù: ƒê·ªëi v·ªõi release, b·∫°n ch·ªâ c·∫ßn seatId.
        // Ta c√≥ th·ªÉ tr√≠ch xu·∫•t List<UUID> seatIds t·ª´ List<SeatSelectionDetail>
        List<UUID> seatIdsToRelease = req.getSelectedSeats().stream()
                .map(detail -> detail.getSeatId())
                .toList();

        return ResponseEntity.ok(
                seatLockService.releaseSeats(req.getShowtimeId(), seatIdsToRelease));
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i gh·∫ø ƒë∆°n l·∫ª (kh√¥ng c·∫ßn thay ƒë·ªïi).
     */
    @GetMapping("/status")
    public ResponseEntity<SeatLockResponse> seatStatus(
            @RequestParam UUID showtimeId,
            @RequestParam UUID seatId) {
        return ResponseEntity.ok(seatLockService.seatStatus(showtimeId, seatId));
    }
}