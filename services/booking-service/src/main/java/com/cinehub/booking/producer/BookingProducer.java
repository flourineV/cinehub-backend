package com.cinehub.booking.producer;

import com.cinehub.booking.config.RabbitConfig;
import com.cinehub.booking.events.booking.BookingCreatedEvent;
import com.cinehub.booking.events.booking.BookingStatusUpdatedEvent;
import com.cinehub.booking.events.showtime.SeatUnlockedEvent;
import com.cinehub.booking.events.booking.BookingSeatMappedEvent;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Component;

@Slf4j
@Component
@RequiredArgsConstructor
public class BookingProducer {

    private final RabbitTemplate rabbitTemplate;

    /**
     * üì§ G·ª≠i event khi booking ƒë∆∞·ª£c t·∫°o.
     * Routing Key: BOOKING_CREATED_KEY
     * Destination: Payment Service
     */
    public void sendBookingCreatedEvent(BookingCreatedEvent event) {
        final String EXCHANGE = RabbitConfig.BOOKING_EXCHANGE;
        final String ROUTING_KEY = RabbitConfig.BOOKING_CREATED_KEY;

        log.info("üì§ Sending BookingCreatedEvent ‚Üí PaymentService | exchange={}, routingKey={}, bookingId={}",
                EXCHANGE, ROUTING_KEY, event.bookingId());

        rabbitTemplate.convertAndSend(EXCHANGE, ROUTING_KEY, event);
    }

    /**
     * üì§ G·ª≠i event khi booking ƒë∆∞·ª£c CONFIRMED ho·∫∑c CANCELLED.
     * Routing Key: BOOKING_CONFIRMED_KEY ho·∫∑c BOOKING_CANCELLED_KEY
     * Destination: Showtime Service (ƒë·ªÉ c·∫≠p nh·∫≠t gh·∫ø)
     */
    public void sendBookingStatusUpdatedEvent(BookingStatusUpdatedEvent event) {
        final String EXCHANGE = RabbitConfig.BOOKING_EXCHANGE;
        final String ROUTING_KEY = switch (event.newStatus()) {
            case CONFIRMED -> RabbitConfig.BOOKING_CONFIRMED_KEY;
            case CANCELLED -> RabbitConfig.BOOKING_CANCELLED_KEY;
            // Case EXPIRED s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ri√™ng ho·∫∑c ƒë∆∞·ª£c th√™m v√†o ƒë√¢y t√πy nhu c·∫ßu
            default -> "key.booking.unknown";
        };

        log.info(
                "üì§ Sending BookingStatusUpdatedEvent ‚Üí ShowtimeService | exchange={}, routingKey={}, bookingId={}, status={}",
                EXCHANGE, ROUTING_KEY, event.bookingId(), event.newStatus());

        rabbitTemplate.convertAndSend(EXCHANGE, ROUTING_KEY, event);
    }

    /**
     * üì§ G·ª≠i event khi booking h·∫øt h·∫°n (d√πng cho Scheduler n·ªôi b·ªô ho·∫∑c logic
     * timeout).
     * Routing Key: BOOKING_EXPIRED_KEY
     * Destination: Showtime Service (ƒë·ªÉ gi·∫£i ph√≥ng gh·∫ø)
     */
    public void sendBookingExpiredEvent(BookingStatusUpdatedEvent event) {
        final String EXCHANGE = RabbitConfig.BOOKING_EXCHANGE;
        final String ROUTING_KEY = RabbitConfig.BOOKING_EXPIRED_KEY;

        log.warn("üì§ Sending BookingExpiredEvent ‚Üí ShowtimeService | exchange={}, routingKey={}, bookingId={}",
                EXCHANGE, ROUTING_KEY, event.bookingId());

        rabbitTemplate.convertAndSend(EXCHANGE, ROUTING_KEY, event);
    }

    /**
     * üì§ G·ª≠i event √°nh x·∫° giao d·ªãch gh·∫ø (Gi·ªØ l·∫°i h√†m n√†y n·∫øu b·∫°n v·∫´n c·∫ßn n√≥).
     * * L∆ØU √ù: SEAT_TRANSACTION_MAPPED_KEY KH√îNG c√≥ trong RabbitConfig, n√™n t√¥i
     * ƒëang d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh.
     */
    public void sendBookingSeatMappedEvent(BookingSeatMappedEvent event) {
        final String EXCHANGE = RabbitConfig.BOOKING_EXCHANGE;
        // ‚ö†Ô∏è L∆∞u √Ω: SEAT_TRANSACTION_MAPPED_KEY KH√îNG ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a trong
        // RabbitConfig
        final String ROUTING_KEY = RabbitConfig.BOOKING_SEAT_MAPPED_KEY;

        log.info("üì§ Sending SeatTransactionMappedEvent ‚Üí ShowtimeService | exchange={}, routingKey={}, bookingId={}",
                EXCHANGE, ROUTING_KEY, event.bookingId());

        rabbitTemplate.convertAndSend(EXCHANGE, ROUTING_KEY, event);
    }

    public void sendSeatUnlockedEvent(SeatUnlockedEvent event) {
        final String EXCHANGE = RabbitConfig.SHOWTIME_EXCHANGE;
        final String ROUTING_KEY = RabbitConfig.BOOKING_SEAT_UNLOCK_KEY;

        log.warn(
                "üì§ Sending SeatUnlockedEvent (REQUEST) ‚Üí ShowtimeService | exchange={}, routingKey={}, bookingId={}, reason={}",
                EXCHANGE, ROUTING_KEY, event.bookingId(), event.reason());

        rabbitTemplate.convertAndSend(EXCHANGE, ROUTING_KEY, event);
    }
}